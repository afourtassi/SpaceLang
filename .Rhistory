for(beta in beta_val){
for(N in N_val){
input = data.frame(alpha = alpha, beta = beta, x= rep(x,3), y = rep(y,3), rot = rep(rot, 3), word = rep(word, 3)) %>% head(N)
posterior <- NULL
while (typeof(posterior)=="NULL") {
posterior <- webppl(model,
data = input,
data_var = "input")
}
learning_norm <- posterior %>%
rbindlist(idcol = TRUE) %>%
gather(hypothese, prob, id:rotFrame_Side_ref) %>%
dplyr::group_by(.id) %>%
dplyr::mutate(prob = prob/sum(prob)) %>%
dplyr::rename(word = .id) %>%
dplyr::mutate(alpha = alpha,
beta = beta,
N = N)
data_all = bind_rows(data_all, learning_norm)
}
}
}
head(data_All)
head(data_all)
library(purrr)
library(readr)
library(ggplot2)
library(langcog)
library(boot)
#  library(lazyeval)
library(dplyr)
library(tidyr)
library(wordbankr)
library(directlabels)
# library(scales)
library(stringr)
library(lmtest)
library(rwebppl)
library(jsonlite)
library(nlme)
library(feather)
library(broom)
library(HDInterval)
library(BBmisc)
library(data.table)
library(plyr)
model_cont <- "
var Id = function(position, rotation){
return {x:position.x, y:position.y};
};
//this reflection is for front/back
var Ref = function(position, rotation){
return {x:-position.x, y:-position.y};
};
//define rotation in general
////////////////////////////
var Rot = function(position, rotation){
var theta = rotation
var theta_rad = theta * Math.PI * 1/180
var rot_x= position.x*Math.cos(theta_rad)-position.y*Math.sin(theta_rad);
var rot_y= position.x*Math.sin(theta_rad)+position.y*Math.cos(theta_rad);
return {x:Math.round(rot_x), y:Math.round(rot_y)};
};
//define rotation for side (left-right)
var Rot_side = function(position, rotation){
return Rot(position, 90)
}
//This rotation is for non-egocentric frame of reference
var Rot_allo = function(position, rotation){
return Rot(position, rotation)
}
//define composition
var Comp = function (opr1, opr2){
return function (position, rotation){
opr1(opr2(position, rotation),rotation)
}
}
//So we are learning 4 words: both front/back, left/right, and we have 8 hypotheses
var hyp_space = [ {name:'id', operation:Id, len:1}, // front
{name:'ref', operation:Ref, len:1}, // back
{name:'rotSide_id', operation:Comp(Rot_side,Id), len:2}, //left ego
{name:'rotSide_ref', operation:Comp(Rot_side,Ref), len:2}, // right ego
{name:'rotFrame_id', operation:Comp(Rot_allo,Id), len:2}, //front allo
{name:'rotFrame_ref', operation:Comp(Rot_allo,Ref), len:2}, // right allo
{name:'rotFrame_Side_id', operation:Comp(Rot_allo, Comp(Rot_side, Id)), len:3}, //left allo
{name:'rotFrame_Side_ref', operation:Comp(Rot_allo, Comp(Rot_side, Ref)), len:3} //right allo
]
var hyp_names  =  map(function(hyp){
return hyp.name
}, hyp_space)
var positions = [
{x:-1,y:0},
{x:1, y:0},
{x:0, y:1},
{x:0, y:-1}
];
var utterances = ['left',
'right',
'front',
'back'
];
var rotations = [0,
90,
180,
270];
var utterancePrior = Categorical({vs: utterances, ps: [1/4, 1/4, 1/4, 1/4]});
var positionPrior =  Categorical({vs: positions, ps: [1/4, 1/4, 1/4, 1/4]});
var rotationPrior =  Categorical({vs: rotations, ps: [1/4, 1/4, 1/4, 1/4]});
//Every word (e.g., 'left' , 'right') has a probability distribution over all hypotheses
// have a different prioir for each word and each hypothesis
//let's first try different infernce for each word
var wordPrior = function(word) {
var hypProbs = T.toScalars(dirichlet(ones([hyp_names.length, 1])))
return Categorical({vs: hyp_names, ps: hypProbs})
}
//Egocentric Meaning: returns true if the word maps to the correct position
var meaning = function(utt, position, rotation) {
var rot_position = Rot(position, -rotation)
return utt=='front'? (rot_position.x==0 && rot_position.y==1):
utt=='back'? (rot_position.x==0 && rot_position.y==-1):
utt=='left'? (rot_position.x==-1 && rot_position.y==0):
utt=='right'? (rot_position.x==1 && rot_position.y==0):
true
};
//Speaker: has in mind a position, and utter the corresponding word based on rotation
var S = cache(function(position, rotation) {
return Infer({method:'enumerate'}, function(){
var utt = sample(utterancePrior);
condition(meaning(utt, position, rotation));
return utt;
});
});
var data = input
var alpha=data[0].alpha
var beta=data[0].beta
var myWord = data[0].word
//Listner: hears a word, sees a rotation and try to associate it with a meaning from the space
//Do a conditional (if the word is the same )
var L1 = function(trueRotation, wordDist) {
return Infer({method:'enumerate'}, function(){
var rep = uniformDraw(hyp_space); //sample a representation
var rep_opr = rep.operation
var response =  rep_opr({x:0,y:1}, trueRotation)
factor(alpha*wordDist.score(rep.name)
-beta*rep.len)
return [response.x, response.y]
});
};
var wordPost = function(word, data) {
return Infer({method : 'MCMC', samples : 50000}, function() {
var wordDist = wordPrior(word);
mapData({data: data}, function(datum){
if (datum.word == word) {observe(L1(datum.rot, wordDist), [datum.x, datum.y])}
});
return wordDist;
});
};
//model()
var learnData = function(size) {
var step = function(data) {
if(data.length == size) return data;
var position = sample(positionPrior)
var rotation = sample(rotationPrior)
var utt = sample(S(position, rotation))
var newDatum = {x: position.x, y: position.y, rot: rotation, word: utt}
return  step(data.concat(newDatum));
}
step([]);
}
var model =  function () {
var data = learnData(20)
var hyps = map(function(w){
return wordPost(w, data).MAP().val;
}, utterances)
return _.object(utterances, hyps);
};
//var data = learnData(10)
wordPost(myWord, data).MAP().val
"
hellooo
model_cont <- "
var Id = function(position, rotation){
return {x:position.x, y:position.y};
};
//this reflection is for front/back
var Ref = function(position, rotation){
return {x:-position.x, y:-position.y};
};
//define rotation in general
////////////////////////////
var Rot = function(position, rotation){
var theta = rotation
var theta_rad = theta * Math.PI * 1/180
var rot_x= position.x*Math.cos(theta_rad)-position.y*Math.sin(theta_rad);
var rot_y= position.x*Math.sin(theta_rad)+position.y*Math.cos(theta_rad);
return {x:Math.round(rot_x), y:Math.round(rot_y)};
};
//define rotation for side (left-right)
var Rot_side = function(position, rotation){
return Rot(position, 90)
}
//This rotation is for non-egocentric frame of reference
var Rot_allo = function(position, rotation){
return Rot(position, rotation)
}
//define composition
var Comp = function (opr1, opr2){
return function (position, rotation){
opr1(opr2(position, rotation),rotation)
}
}
//So we are learning 4 words: both front/back, left/right, and we have 8 hypotheses
var hyp_space = [ {name:'id', operation:Id, len:1}, // front
{name:'ref', operation:Ref, len:1}, // back
{name:'rotSide_id', operation:Comp(Rot_side,Id), len:2}, //left ego
{name:'rotSide_ref', operation:Comp(Rot_side,Ref), len:2}, // right ego
{name:'rotFrame_id', operation:Comp(Rot_allo,Id), len:2}, //front allo
{name:'rotFrame_ref', operation:Comp(Rot_allo,Ref), len:2}, // right allo
{name:'rotFrame_Side_id', operation:Comp(Rot_allo, Comp(Rot_side, Id)), len:3}, //left allo
{name:'rotFrame_Side_ref', operation:Comp(Rot_allo, Comp(Rot_side, Ref)), len:3} //right allo
]
var hyp_names  =  map(function(hyp){
return hyp.name
}, hyp_space)
var positions = [
{x:-1,y:0},
{x:1, y:0},
{x:0, y:1},
{x:0, y:-1}
];
var utterances = ['left',
'right',
'front',
'back'
];
var rotations = [0,
90,
180,
270];
var utterancePrior = Categorical({vs: utterances, ps: [1/4, 1/4, 1/4, 1/4]});
var positionPrior =  Categorical({vs: positions, ps: [1/4, 1/4, 1/4, 1/4]});
var rotationPrior =  Categorical({vs: rotations, ps: [1/4, 1/4, 1/4, 1/4]});
//Every word (e.g., 'left' , 'right') has a probability distribution over all hypotheses
// have a different prioir for each word and each hypothesis
//let's first try different infernce for each word
var wordPrior = function(word) {
var hypProbs = T.toScalars(dirichlet(ones([hyp_names.length, 1])))
return Categorical({vs: hyp_names, ps: hypProbs})
}
//Egocentric Meaning: returns true if the word maps to the correct position
var meaning = function(utt, position, rotation) {
var rot_position = Rot(position, -rotation)
return utt=='front'? (rot_position.x==0 && rot_position.y==1):
utt=='back'? (rot_position.x==0 && rot_position.y==-1):
utt=='left'? (rot_position.x==-1 && rot_position.y==0):
utt=='right'? (rot_position.x==1 && rot_position.y==0):
true
};
//Speaker: has in mind a position, and utter the corresponding word based on rotation
var S = cache(function(position, rotation) {
return Infer({method:'enumerate'}, function(){
var utt = sample(utterancePrior);
condition(meaning(utt, position, rotation));
return utt;
});
});
var data = input
var alpha=data[0].alpha
var beta=data[0].beta
var myWord = data[0].word
//Listner: hears a word, sees a rotation and try to associate it with a meaning from the space
//Do a conditional (if the word is the same )
var L1 = function(trueRotation, wordDist) {
return Infer({method:'enumerate'}, function(){
var rep = uniformDraw(hyp_space); //sample a representation
var rep_opr = rep.operation
var response =  rep_opr({x:0,y:1}, trueRotation)
factor(alpha*wordDist.score(rep.name)
-beta*rep.len)
return [response.x, response.y]
});
};
var wordPost = function(word, data) {
return Infer({method : 'MCMC', samples : 50000}, function() {
var wordDist = wordPrior(word);
mapData({data: data}, function(datum){
if (datum.word == word) {observe(L1(datum.rot, wordDist), [datum.x, datum.y])}
});
return wordDist;
});
};
//model()
var learnData = function(size) {
var step = function(data) {
if(data.length == size) return data;
var position = sample(positionPrior)
var rotation = sample(rotationPrior)
var utt = sample(S(position, rotation))
var newDatum = {x: position.x, y: position.y, rot: rotation, word: utt}
return  step(data.concat(newDatum));
}
step([]);
}
var model =  function () {
var data = learnData(20)
var hyps = map(function(w){
return wordPost(w, data).MAP().val;
}, utterances)
return _.object(utterances, hyps);
};
//var data = learnData(10)
wordPost(myWord, data).MAP().val
"
alpha_val = c(2)
beta_val = c(1, 2, 4, 6, 8)
N_val = seq(1, 12)
data_front_exp_cont = data.frame()
#x=c(1, 1, 1, 1,  0, -1, 0)
#y=c(0, 0, 0, 0, 1, 0, -1)
#rot=c(0,0, 0,0, 90, 180, 270)
x=c(0, -1, 0, 1)
y=c(1, 0, -1, 0)
rot=c(0, 90, 180, 270)
word='front'
for (alpha in alpha_val){
for(beta in beta_val){
for(N in N_val){
input = data.frame(alpha = alpha, beta = beta, x=rep(x,4), y=rep(y,4), rot=rep(rot,4), word = rep(rep(word, 4), 4)) %>% head(N)
posterior <- NULL
while (typeof(posterior)=="NULL") {
posterior <- webppl(model_cont,
data = input,
data_var = "input")
}
learning <- posterior %>%
rename(hypothese = support) %>%
mutate(word = word,
alpha= alpha,
beta = beta,
N=N)
data_front_exp_cont = bind_rows(data_front_exp_cont, learning)
}
}
}
alpha_val = c(2)
beta_val = c(2)
N_val = seq(1, 8)
data_right_exp_cont = data.frame()
x=c(0,  1, -1, 0)
y=c(1, 0, 0, -1)
rot=c(90, 0, 180, 270)
#x=c(1,  0, -1, 0)
#y=c(0, 1, 0, -1)
#rot=c(0, 90, 180, 270)
word='right'
for (alpha in alpha_val){
for(beta in beta_val){
for(N in N_val){
input = data.frame(alpha = alpha, beta = beta, x=rep(x,4), y=rep(y,4), rot=rep(rot,4), word = rep(rep(word, 4), 4)) %>% head(N)
posterior <- NULL
while (typeof(posterior)=="NULL") {
posterior <- webppl(model_cont,
data = input,
data_var = "input")
}
learning <- posterior %>%
rename(hypothese = support) %>%
mutate(word = word,
alpha= alpha,
beta = beta,
N=N)
data_right_exp_cont = bind_rows(data_right_exp_cont, learning)
}
}
}
data_explore <- data_right_exp_cont #%>%
#filter(word == "right")#,
#beta < alpha |  beta == alpha)
data_explore$hypothese <- mapvalues(data_explore$hypothese,
from = c("id", "ref",
"rotSide_id","rotSide_ref",
"rotFrame_id","rotFrame_ref",
"rotFrame_Side_id","rotFrame_Side_ref"),
to = c("front_ego", "back_ego",
"left_ego", "right_ego",
"front_allo", "back_allo",
"left_allo", "right_allo"))
data_explore$hypothese = factor(data_explore$hypothese, levels = c("front_ego", "back_ego", "left_ego", "right_ego", "front_allo", "back_allo", "left_allo", "right_allo"))
right_alpha <- ggplot(subset(data_explore, prob > 0.15 | hypothese == 'right_ego' | hypothese == 'right_allo' ), aes(x=N, y=prob, col=hypothese))+
geom_point()+geom_line()+
facet_grid(.  ~ beta) +
theme(aspect.ratio = 0.7, axis.text.x = element_text(angle = 90, hjust = 1))
right_alpha
right_alpha <- ggplot(subset(data_explore, prob > 0.1 | hypothese == 'right_ego' | hypothese == 'right_allo' ), aes(x=N, y=prob, col=hypothese))+
geom_point()+geom_line()+
facet_grid(.  ~ beta) +
theme(aspect.ratio = 0.7, axis.text.x = element_text(angle = 90, hjust = 1))
right_alpha
right_alpha <- ggplot(subset(data_explore, prob > 0.1 | hypothese == 'right_ego' | hypothese == 'front_ego' ), aes(x=N, y=prob, col=hypothese))+
geom_point()+geom_line()+
facet_grid(.  ~ beta) +
theme(aspect.ratio = 0.7, axis.text.x = element_text(angle = 90, hjust = 1))
right_alpha
data_explore <- data_front_exp_cont #%>%
#filter(word == "right")#,
#beta < alpha |  beta == alpha)
data_explore$hypothese <- mapvalues(data_explore$hypothese,
from = c("id", "ref",
"rotSide_id","rotSide_ref",
"rotFrame_id","rotFrame_ref",
"rotFrame_Side_id","rotFrame_Side_ref"),
to = c("front_ego", "back_ego",
"left_ego", "right_ego",
"front_allo", "back_allo",
"left_allo", "right_allo"))
data_explore$hypothese = factor(data_explore$hypothese, levels = c("front_ego", "back_ego", "left_ego", "right_ego", "front_allo", "back_allo", "left_allo", "right_allo"))
right_alpha <- ggplot(subset(data_explore, prob > 0.1 | hypothese == 'right_ego' | hypothese == 'front_ego' ), aes(x=N, y=prob, col=hypothese))+
geom_point()+geom_line()+
facet_grid(.  ~ beta) +
theme(aspect.ratio = 0.7, axis.text.x = element_text(angle = 90, hjust = 1))
data_explore <- data_front_exp_cont #%>%
#filter(word == "right")#,
#beta < alpha |  beta == alpha)
data_explore$hypothese <- mapvalues(data_explore$hypothese,
from = c("id", "ref",
"rotSide_id","rotSide_ref",
"rotFrame_id","rotFrame_ref",
"rotFrame_Side_id","rotFrame_Side_ref"),
to = c("front_ego", "back_ego",
"left_ego", "right_ego",
"front_allo", "back_allo",
"left_allo", "right_allo"))
data_explore$hypothese = factor(data_explore$hypothese, levels = c("front_ego", "back_ego", "left_ego", "right_ego", "front_allo", "back_allo", "left_allo", "right_allo"))
right_alpha <- ggplot(subset(data_explore, prob > 0.2 | hypothese == 'front_ego' | hypothese == 'front_allo' ), aes(x=N, y=prob, col=hypothese))+
geom_point()+geom_line()+
facet_grid(.  ~ beta) +
theme(aspect.ratio = 0.7, axis.text.x = element_text(angle = 90, hjust = 1))
right_alpha
data_explore <- data_right_exp_cont #%>%
#filter(word == "right")#,
#beta < alpha |  beta == alpha)
data_explore$hypothese <- mapvalues(data_explore$hypothese,
from = c("id", "ref",
"rotSide_id","rotSide_ref",
"rotFrame_id","rotFrame_ref",
"rotFrame_Side_id","rotFrame_Side_ref"),
to = c("front_ego", "back_ego",
"left_ego", "right_ego",
"front_allo", "back_allo",
"left_allo", "right_allo"))
data_explore$hypothese = factor(data_explore$hypothese, levels = c("front_ego", "back_ego", "left_ego", "right_ego", "front_allo", "back_allo", "left_allo", "right_allo"))
right_alpha <- ggplot(subset(data_explore), aes(x=N, y=prob, col=hypothese))+
geom_point()+geom_line()+
facet_grid(.  ~ beta) +
theme(aspect.ratio = 0.7, axis.text.x = element_text(angle = 90, hjust = 1))
right_alpha
alpha_val = c(2)
beta_val = c(1, 2, 4, 4.5, 5, 6, 8)
N_val = seq(1, 12)
data_right_exp_cont = data.frame()
x=c(1,  0, -1, 0)
y=c(0, 1, 0, -1)
rot=c(0, 90, 180, 270)
word='right'
for (alpha in alpha_val){
for(beta in beta_val){
for(N in N_val){
input = data.frame(alpha = alpha, beta = beta, x=rep(x,3), y=rep(y,3), rot=rep(rot,3), word = rep(rep(word, 4), 3)) %>% head(N)
posterior <- NULL
while (typeof(posterior)=="NULL") {
posterior <- webppl(model_cont,
data = input,
data_var = "input")
}
learning <- posterior %>%
rename(hypothese = support) %>%
mutate(word = word,
alpha= alpha,
beta = beta,
N=N)
data_right_exp_cont = bind_rows(data_right_exp_cont, learning)
}
}
}
alpha_val = c(2)
beta_val = c(1, 2, 4, 6, 8)
N_val = seq(1, 12)
data_front_exp_cont = data.frame()
x=c(0, -1, 0, 1)
y=c(1, 0, -1, 0)
rot=c(0, 90, 180, 270)
word='front'
for (alpha in alpha_val){
for(beta in beta_val){
for(N in N_val){
input = data.frame(alpha = alpha, beta = beta, x=rep(x,3), y=rep(y,3), rot=rep(rot,3), word = rep(rep(word, 4), 3)) %>% head(N)
posterior <- NULL
while (typeof(posterior)=="NULL") {
posterior <- webppl(model_cont,
data = input,
data_var = "input")
}
learning <- posterior %>%
rename(hypothese = support) %>%
mutate(word = word,
alpha= alpha,
beta = beta,
N=N)
data_front_exp_cont = bind_rows(data_front_exp_cont, learning)
}
}
}
